var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,0.871,1,1.646]],["body/controllers/AppController.html",[0,1.362,1,2.573,2,1.078,3,0.535,4,0.45,5,0.45,6,2.792,7,0.726,8,1.542,9,4.06,10,2.037,11,0.048,12,1.221,13,3.448,14,1.221,15,1.977,16,0.792,17,0.535,18,2.167,19,2.792,20,0.535,21,0.627,22,2.792,23,1.382,24,1.221,25,3.448,26,0.03,27,0.037,28,0.03]],["title/modules/AppModule.html",[29,0.673,30,1.437]],["body/modules/AppModule.html",[1,2.403,2,1.1,3,0.389,4,0.327,5,0.327,11,0.049,16,0.876,17,0.389,18,2.187,19,2.029,20,0.546,21,0.64,26,0.021,27,0.03,28,0.021,29,1.122,30,2.761,31,1.44,32,1.004,33,1.293,34,1.293,35,1.004,36,2.1,37,1.293,38,2.029,39,2.029,40,2.029,41,2.487,42,2.487,43,2.487,44,1.816,45,1.293,46,1.293,47,2.506,48,0.456,49,3.519,50,3.519,51,4.411,52,3.519,53,2.506,54,2.506,55,2.506,56,2.506]],["title/injectables/AppService.html",[18,1.264,57,0.871]],["body/injectables/AppService.html",[3,0.564,4,0.474,5,0.474,7,0.765,8,1.593,9,4.137,11,0.047,12,1.287,14,1.287,15,2.043,16,0.661,17,0.564,18,2.043,20,0.564,21,0.661,24,1.287,26,0.031,27,0.039,28,0.031,57,1.407,58,1.876,59,2.942,60,3.633,61,3.633,62,3.633]],["title/interfaces/AuthBody.html",[63,1.646,64,1.437]],["body/interfaces/AuthBody.html",[3,0.436,4,0.366,5,0.366,7,0.591,11,0.048,15,2.357,20,0.436,26,0.024,27,0.033,28,0.024,48,0.511,63,1.66,64,2.498,65,2.809,66,2.275,67,2.809,68,1.45,69,0.995,70,1.45,71,2.23,72,2.809,73,2.809,74,3.808,75,4.991,76,4.991,77,4.631,78,1.56,79,4.631,80,4.631,81,3.808,82,3.808,83,3.808,84,1.731]],["title/controllers/AuthenticationController.html",[0,0.871,85,1.646]],["body/controllers/AuthenticationController.html",[0,0.644,2,0.644,3,0.32,4,0.269,5,0.269,7,0.434,8,1.082,10,1.806,11,0.049,12,1.082,14,1.426,16,0.662,17,0.32,20,0.474,21,0.556,23,0.826,24,1.082,26,0.018,27,0.026,28,0.018,48,0.375,64,2.526,69,1.082,78,0.955,84,1.459,85,2.756,86,1.669,87,1.411,88,3.484,89,1.387,90,2.092,91,2.092,92,1.387,93,2.092,94,3.649,95,2.474,96,2.474,97,1.669,98,3.056,99,2.061,100,2.38,101,2.757,102,4.028,103,2.474,104,2.38,105,1.387,106,1.387,107,1.387,108,2.949,109,3.084,110,1.669,111,3.056,112,2.061,113,2.474,114,1.577,115,2.949,116,1.411,117,1.669,118,1.669,119,1.653,120,1.669,121,2.061,122,0.936,123,0.936,124,1.653,125,1.064,126,1.064,127,2.061,128,2.061,129,2.061,130,2.061]],["title/modules/AuthenticationModule.html",[29,0.673,41,1.437]],["body/modules/AuthenticationModule.html",[2,1.2,3,0.441,4,0.37,5,0.37,11,0.048,16,0.884,17,0.441,20,0.596,21,0.698,26,0.024,27,0.033,28,0.024,29,1.049,31,1.006,32,1.138,33,1.467,34,1.467,35,1.138,36,2.243,37,1.467,41,2.642,44,1.981,45,1.467,46,1.467,48,0.517,85,2.567,88,3.107,119,2.273,120,2.301,131,2.301,132,2.301,133,2.841,134,2.267,135,2.267,136,2.267,137,2.841,138,1.2,139,1.29,140,2.627,141,2.841,142,1.945,143,1.945]],["title/injectables/AuthenticationService.html",[57,0.871,119,1.264]],["body/injectables/AuthenticationService.html",[3,0.268,4,0.226,5,0.226,7,0.364,8,0.948,11,0.049,12,1.304,14,1.411,16,0.724,17,0.268,20,0.415,21,0.487,23,0.693,24,0.948,26,0.015,27,0.023,28,0.015,48,0.315,57,0.837,58,0.893,64,2.404,68,1.381,69,0.948,70,1.901,71,1.381,78,1.023,84,1.476,89,1.215,92,1.486,94,3.411,95,2.167,96,2.167,97,2.167,100,1.581,103,2.167,104,2.177,105,1.672,106,1.672,107,1.672,108,2.65,109,2.883,110,2.167,113,2.167,114,1.689,115,2.65,118,1.401,119,2.115,122,1.215,123,1.215,124,1.672,125,1.381,126,2.056,138,0.837,139,0.785,144,1.401,145,1.184,146,2.676,147,1.73,148,2.727,149,1.73,150,3.273,151,2.676,152,1.73,153,2.676,154,2.676,155,2.676,156,2.676,157,2.676,158,1.73,159,1.73,160,3.684,161,1.73,162,1.184,163,2.167,164,2.676,165,1.401,166,1.73,167,2.676,168,2.167,169,2.676,170,1.73,171,1.401,172,1.73,173,1.73,174,1.73,175,1.401]],["title/modules/CoreModule.html",[29,0.673,176,1.906]],["body/modules/CoreModule.html",[3,0.561,4,0.471,5,0.471,11,0.048,16,0.657,17,0.561,20,0.696,21,0.816,26,0.031,27,0.038,28,0.031,29,1.084,31,1.28,48,0.657,134,2.651,135,2.651,176,3.339,177,3.616,178,4.486,179,4.486,180,4.486]],["title/controllers/IngredientsController.html",[0,0.871,181,1.646]],["body/controllers/IngredientsController.html",[0,0.792,2,0.792,3,0.393,4,0.33,5,0.33,7,0.533,8,1.255,10,1.496,11,0.049,12,0.896,14,1.255,16,0.744,17,0.393,20,0.55,21,0.644,23,1.014,24,0.896,26,0.022,27,0.03,28,0.022,48,0.46,69,1.255,78,0.792,84,1.42,87,1.733,89,1.609,90,2.426,91,2.426,92,1.609,93,2.426,100,2.094,101,2.426,105,1.149,106,1.149,107,1.149,122,1.149,123,1.149,124,1.609,125,1.307,126,1.307,181,2.856,182,2.05,183,2.799,184,4.431,185,3.544,186,2.531,187,4.101,188,2.531,189,2.87,190,2.05,191,1.857,192,2.05,193,1.733,194,2.531,195,2.531,196,2.531]],["title/modules/IngredientsModule.html",[29,0.673,42,1.437]],["body/modules/IngredientsModule.html",[2,1.191,3,0.436,4,0.366,5,0.366,11,0.049,16,0.88,17,0.436,20,0.591,21,0.692,26,0.024,27,0.033,28,0.024,29,1.043,31,0.995,32,1.126,33,1.45,34,1.45,35,1.126,36,2.23,37,1.45,42,2.635,44,1.965,45,1.45,46,1.45,48,0.511,134,2.25,135,2.25,136,2.25,138,1.191,139,1.275,142,1.923,143,1.923,181,2.553,183,2.606,191,2.266,192,2.275,197,2.275,198,2.275,199,2.809,200,2.809,201,2.606,202,2.809]],["title/injectables/IngredientsService.html",[57,0.871,191,1.264]],["body/injectables/IngredientsService.html",[3,0.373,4,0.313,5,0.313,7,0.505,8,1.209,11,0.049,12,1.209,14,1.209,15,1.965,16,0.722,17,0.373,20,0.53,21,0.621,23,0.962,24,0.85,26,0.021,27,0.029,28,0.021,48,0.436,57,1.067,58,1.239,68,1.239,69,1.209,70,1.762,71,1.762,78,1.067,84,1.368,89,1.55,92,1.55,105,1.55,106,1.55,107,1.55,122,1.55,123,1.55,124,1.55,125,1.762,126,1.239,138,1.067,139,1.09,145,1.643,148,3.13,162,1.643,165,1.944,183,3.13,191,2.219,203,1.944,204,3.414,205,2.764,206,2.4,207,2.4,208,2.764,209,2.4,210,3.414,211,3.217,212,2.4,213,1.944,214,2.4,215,2.4]],["title/controllers/OrdersController.html",[0,0.871,216,1.646]],["body/controllers/OrdersController.html",[0,0.595,2,0.595,3,0.295,4,0.248,5,0.248,7,0.4,8,1.019,10,2.051,11,0.049,12,1.229,14,1.549,16,0.631,17,0.295,20,0.447,21,0.523,22,1.541,23,0.762,24,1.229,26,0.016,27,0.025,28,0.016,48,0.346,69,1.019,78,1.086,84,1.391,87,1.302,89,1.307,90,1.97,91,1.97,92,1.307,93,1.97,100,2.584,101,2.994,104,1.701,105,1.576,106,1.576,107,1.576,114,1.486,116,2.376,117,2.331,124,1.757,187,4.367,189,3.134,190,1.541,193,1.302,216,2.584,217,1.541,218,3.202,219,2.878,220,2.878,221,2.331,222,1.902,223,2.878,224,1.902,225,1.902,226,2.878,227,1.902,228,2.331,229,1.902,230,4.157,231,1.902,232,2.878,233,1.97,234,1.307,235,1.541,236,1.902,237,1.902,238,1.902,239,1.902,240,1.902,241,1.902,242,1.902,243,1.902]],["title/modules/OrdersModule.html",[29,0.673,43,1.437]],["body/modules/OrdersModule.html",[2,1.191,3,0.436,4,0.366,5,0.366,11,0.049,16,0.88,17,0.436,20,0.591,21,0.692,26,0.024,27,0.033,28,0.024,29,1.043,31,0.995,32,1.126,33,1.45,34,1.45,35,1.126,36,2.23,37,1.45,43,2.635,44,1.965,45,1.45,46,1.45,48,0.511,134,2.25,135,2.25,136,2.25,138,1.191,139,1.275,142,1.923,143,1.923,216,2.553,218,2.606,234,2.266,235,2.275,244,2.275,245,2.275,246,2.809,247,2.809,248,2.606,249,2.809]],["title/injectables/OrdersService.html",[57,0.871,234,1.264]],["body/injectables/OrdersService.html",[3,0.252,4,0.212,5,0.212,7,0.342,8,0.902,11,0.049,12,1.261,14,1.453,15,2.303,16,0.572,17,0.252,20,0.395,21,0.463,23,0.651,24,1.113,26,0.014,27,0.022,28,0.014,48,0.295,57,0.797,58,0.838,68,1.623,69,0.902,70,1.315,71,1.315,78,1.113,84,1.427,89,1.157,92,1.157,104,1.505,105,1.616,106,1.616,107,1.616,109,3.127,114,1.996,116,1.111,122,1.157,123,1.157,124,1.863,125,0.838,126,0.838,138,1.209,139,0.737,145,1.111,148,2.647,162,1.111,163,1.315,168,2.546,171,2.546,175,2.546,205,2.063,208,2.063,211,3.7,213,2.546,218,2.437,221,2.063,228,2.063,233,3.127,234,2.074,250,1.315,251,2.547,252,1.624,253,1.624,254,1.624,255,2.547,256,4.104,257,1.624,258,2.547,259,1.624,260,2.547,261,1.624,262,3.143,263,3.143,264,3.143,265,3.143,266,1.624,267,1.624]],["title/coverage.html",[268,2.591]],["body/coverage.html",[0,1.453,1,1.672,5,0.369,6,2.292,11,0.047,18,1.285,26,0.024,27,0.033,28,0.024,35,1.134,57,1.453,59,2.292,63,1.672,64,1.461,66,2.292,78,0.885,85,1.672,86,2.292,114,1.461,119,1.285,138,0.885,140,1.937,144,2.292,181,1.672,182,2.292,191,1.285,201,1.937,203,2.292,216,1.672,217,2.292,234,1.285,248,1.937,250,2.292,268,1.937,269,2.83,270,2.83,271,2.83,272,3.827,273,3.827,274,2.292,275,4.645,276,5.417,277,4.853,278,3.827,279,3.827,280,3.827,281,2.292,282,2.292,283,2.83,284,2.292,285,2.83,286,2.292,287,2.83,288,2.83]],["title/dependencies.html",[32,1.34,289,2.333]],["body/dependencies.html",[11,0.048,17,0.575,26,0.032,27,0.039,28,0.032,32,1.485,138,1.159,193,2.537,290,4.555,291,3.706,292,3.706,293,3.706,294,3.706,295,3.706,296,3.706,297,3.706,298,3.706,299,3.706,300,3.706,301,3.706,302,3.706,303,3.706,304,3.706,305,3.001,306,3.706]],["title/miscellaneous/functions.html",[307,1.379,308,2.709]],["body/miscellaneous/functions.html",[7,0.852,11,0.041,26,0.035,27,0.041,28,0.035,30,2.09,35,2.053,122,1.838,284,3.279,307,2.393,308,3.279,309,4.049,310,4.049,311,4.049,312,3.279,313,4.049]],["title/index.html",[7,0.491,314,2.333,315,2.333]],["body/index.html",[4,0.364,11,0.046,26,0.024,27,0.032,28,0.024,48,0.507,136,1.647,268,1.908,305,2.258,312,2.258,316,2.788,317,2.788,318,3.788,319,2.788,320,2.788,321,2.788,322,2.788,323,2.788,324,2.788,325,2.788,326,2.788,327,4.303,328,2.788,329,2.788,330,2.788,331,4.303,332,5.094,333,2.788,334,2.788,335,2.788,336,4.979,337,2.788,338,2.788,339,3.788,340,2.788,341,2.788,342,2.788,343,4.303,344,2.788,345,3.788,346,2.788,347,2.788,348,2.788,349,3.068,350,3.788,351,3.788,352,2.788,353,2.788,354,2.788,355,2.788,356,2.788,357,2.788,358,2.788,359,2.788,360,2.788,361,2.788,362,2.788,363,2.788,364,2.788,365,2.788,366,2.788,367,2.788,368,2.788,369,2.788,370,2.788,371,2.788,372,2.788,373,2.788,374,2.788]],["title/modules.html",[31,1.34]],["body/modules.html",[11,0.04,26,0.033,27,0.04,28,0.033,30,1.972,31,1.353,41,1.972,42,1.972,43,1.972,176,2.615,349,4.209,375,5.198,376,5.198,377,5.326,378,3.82,379,3.82]],["title/overview.html",[380,3.065]],["body/overview.html",[2,0.958,11,0.046,18,2.048,26,0.026,27,0.035,28,0.026,29,0.74,30,2.791,31,1.085,32,1.228,33,1.582,34,1.582,35,1.228,36,1.582,37,1.582,38,2.481,39,2.481,40,2.481,41,2.572,42,2.572,43,2.572,44,2.083,45,1.582,46,1.582,58,1.582,63,1.81,119,2.048,131,2.481,132,2.481,191,2.048,197,2.481,198,2.481,234,2.048,244,2.481,245,2.481,380,2.481,381,3.064,382,4.035,383,3.064]],["title/miscellaneous/variables.html",[307,1.379,384,2.709]],["body/miscellaneous/variables.html",[7,0.648,11,0.046,15,1.397,26,0.026,27,0.035,28,0.026,68,1.588,69,1.601,70,2.334,71,2.334,78,0.962,123,2.053,138,1.633,140,2.77,201,2.77,233,2.106,248,2.77,274,2.491,281,2.491,282,2.491,286,2.491,307,1.818,384,2.491,385,3.076,386,3.076,387,3.076,388,3.076,389,4.803,390,4.803,391,4.521,392,4.521,393,3.076,394,4.521,395,3.076,396,3.076,397,3.076,398,3.076,399,3.076,400,3.076]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthBody.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":272,"title":{},"body":{"coverage.html":{}}}],["0.1.12",{"_index":297,"title":{},"body":{"dependencies.html":{}}}],["0.18.0",{"_index":294,"title":{},"body":{"dependencies.html":{}}}],["0/2",{"_index":273,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":383,"title":{},"body":{"overview.html":{}}}],["1/1",{"_index":277,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":276,"title":{},"body":{"coverage.html":{}}}],["2.6.2",{"_index":299,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":283,"title":{},"body":{"coverage.html":{}}}],["3.0.1",{"_index":306,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":293,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":278,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":382,"title":{},"body":{"overview.html":{}}}],["4.0.5",{"_index":304,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":280,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":381,"title":{},"body":{"overview.html":{}}}],["5.4.0",{"_index":290,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":279,"title":{},"body":{"coverage.html":{}}}],["6.2.2",{"_index":301,"title":{},"body":{"dependencies.html":{}}}],["aggregates",{"_index":134,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{}}}],["always",{"_index":82,"title":{},"body":{"interfaces/AuthBody.html":{}}}],["amazing",{"_index":357,"title":{},"body":{"index.html":{}}}],["angular",{"_index":326,"title":{},"body":{"index.html":{}}}],["api",{"_index":92,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["app",{"_index":136,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{},"index.html":{}}}],["app.controller",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":323,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":30,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":73,"title":{},"body":{"interfaces/AuthBody.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["auth",{"_index":68,"title":{},"body":{"interfaces/AuthBody.html":{},"injectables/AuthenticationService.html":{},"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{},"miscellaneous/variables.html":{}}}],["authbody",{"_index":64,"title":{"interfaces/AuthBody.html":{}},"body":{"interfaces/AuthBody.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["authenticaiton",{"_index":150,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authentication",{"_index":88,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{}}}],["authentication.axios",{"_index":141,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.controller",{"_index":137,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.service",{"_index":120,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{}}}],["authentication.types",{"_index":118,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["authentication/authentication.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["authenticationaxios",{"_index":140,"title":{},"body":{"modules/AuthenticationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authenticationcontroller",{"_index":85,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":41,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":119,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["authenticationtoken",{"_index":211,"title":{},"body":{"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{}}}],["author",{"_index":367,"title":{},"body":{"index.html":{}}}],["available",{"_index":379,"title":{},"body":{"modules.html":{}}}],["axios",{"_index":138,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["axios.create",{"_index":391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axiosinstance",{"_index":148,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{}}}],["backers",{"_index":358,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bash",{"_index":331,"title":{},"body":{"index.html":{}}}],["body",{"_index":117,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/OrdersController.html":{}}}],["boolean",{"_index":80,"title":{},"body":{"interfaces/AuthBody.html":{}}}],["bootstrap",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":377,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":375,"title":{},"body":{"modules.html":{}}}],["building",{"_index":319,"title":{},"body":{"index.html":{}}}],["catch((error",{"_index":264,"title":{},"body":{"injectables/OrdersService.html":{}}}],["catch(this.handleerror",{"_index":169,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["class",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["client",{"_index":72,"title":{},"body":{"interfaces/AuthBody.html":{}}}],["cluster_appmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":131,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_providers",{"_index":132,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_ingredientsmodule",{"_index":197,"title":{},"body":{"modules/IngredientsModule.html":{},"overview.html":{}}}],["cluster_ingredientsmodule_providers",{"_index":198,"title":{},"body":{"modules/IngredientsModule.html":{},"overview.html":{}}}],["cluster_ordersmodule",{"_index":244,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_ordersmodule_providers",{"_index":245,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["communication",{"_index":70,"title":{},"body":{"interfaces/AuthBody.html":{},"injectables/AuthenticationService.html":{},"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{},"miscellaneous/variables.html":{}}}],["config",{"_index":164,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["config.api_base_url}/ingredients.json",{"_index":398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.api_base_url}/orders.json",{"_index":400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configured",{"_index":394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":125,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{}}}],["constructor(@inject(axios",{"_index":261,"title":{},"body":{"injectables/OrdersService.html":{}}}],["constructor(authenticaiton",{"_index":147,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["constructor(axios",{"_index":252,"title":{},"body":{"injectables/OrdersService.html":{}}}],["constructor(ingredients",{"_index":206,"title":{},"body":{"injectables/IngredientsService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/OrdersController.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/IngredientsController.html":{},"controllers/OrdersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/IngredientsController.html":{},"controllers/OrdersController.html":{},"coverage.html":{}}}],["controller('authentication",{"_index":121,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('ingredients",{"_index":194,"title":{},"body":{"controllers/IngredientsController.html":{}}}],["controller('orders",{"_index":236,"title":{},"body":{"controllers/OrdersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"overview.html":{}}}],["core",{"_index":178,"title":{},"body":{"modules/CoreModule.html":{}}}],["core/tokens",{"_index":139,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["coremodule",{"_index":176,"title":{"modules/CoreModule.html":{}},"body":{"modules/CoreModule.html":{},"modules.html":{}}}],["coverage",{"_index":268,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["creates",{"_index":122,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{},"miscellaneous/functions.html":{}}}],["data",{"_index":156,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["declarations",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/IngredientsController.html":{},"controllers/OrdersController.html":{}}}],["default",{"_index":389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["defining",{"_index":90,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/IngredientsController.html":{},"controllers/OrdersController.html":{}}}],["dependencies",{"_index":32,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthBody.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"index.html":{}}}],["development",{"_index":335,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":269,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":67,"title":{},"body":{"interfaces/AuthBody.html":{}}}],["e2e",{"_index":346,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":320,"title":{},"body":{"index.html":{}}}],["email",{"_index":75,"title":{},"body":{"interfaces/AuthBody.html":{}}}],["equalto",{"_index":267,"title":{},"body":{"injectables/OrdersService.html":{}}}],["error",{"_index":157,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["error.message",{"_index":174,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["error.response.data",{"_index":172,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["error.response.status",{"_index":175,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/OrdersService.html":{}}}],["errors",{"_index":153,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["example",{"_index":145,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{}}}],["existing",{"_index":103,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthBody.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["exports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{},"overview.html":{}}}],["express",{"_index":193,"title":{},"body":{"controllers/IngredientsController.html":{},"controllers/OrdersController.html":{},"dependencies.html":{}}}],["extracting",{"_index":154,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["feature",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["features",{"_index":180,"title":{},"body":{"modules/CoreModule.html":{}}}],["fetching",{"_index":189,"title":{},"body":{"controllers/IngredientsController.html":{},"controllers/OrdersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthBody.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{}}}],["firebase",{"_index":71,"title":{},"body":{"interfaces/AuthBody.html":{},"injectables/AuthenticationService.html":{},"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":318,"title":{},"body":{"index.html":{}}}],["function",{"_index":285,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":135,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{}}}],["functions",{"_index":308,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('all",{"_index":223,"title":{},"body":{"controllers/OrdersController.html":{}}}],["get('byuser",{"_index":226,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getall",{"_index":205,"title":{},"body":{"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{}}}],["getall(authenticationtoken",{"_index":208,"title":{},"body":{"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{}}}],["getallingredients",{"_index":185,"title":{},"body":{"controllers/IngredientsController.html":{}}}],["getallingredients(@req",{"_index":195,"title":{},"body":{"controllers/IngredientsController.html":{}}}],["getallingredients(request",{"_index":186,"title":{},"body":{"controllers/IngredientsController.html":{}}}],["getallorders",{"_index":219,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getallorders(@req",{"_index":237,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getallorders(request",{"_index":222,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getbyuser",{"_index":251,"title":{},"body":{"injectables/OrdersService.html":{}}}],["getbyuser(authenticationtoken",{"_index":255,"title":{},"body":{"injectables/OrdersService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getordersbyuser",{"_index":220,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getordersbyuser(@req",{"_index":239,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getordersbyuser(request",{"_index":225,"title":{},"body":{"controllers/OrdersController.html":{}}}],["gets",{"_index":210,"title":{},"body":{"injectables/IngredientsService.html":{}}}],["getting",{"_index":314,"title":{"index.html":{}},"body":{}}],["graph",{"_index":378,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":354,"title":{},"body":{"index.html":{}}}],["handleerror",{"_index":146,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["handleerror(error",{"_index":151,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["handles",{"_index":100,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"controllers/OrdersController.html":{}}}],["handling",{"_index":91,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/IngredientsController.html":{},"controllers/OrdersController.html":{}}}],["heavily",{"_index":324,"title":{},"body":{"index.html":{}}}],["hello",{"_index":61,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":364,"title":{},"body":{"index.html":{}}}],["http",{"_index":311,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httpexception",{"_index":163,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/OrdersService.html":{}}}],["httpexception(error.message",{"_index":265,"title":{},"body":{"injectables/OrdersService.html":{}}}],["https://nestjs.com",{"_index":371,"title":{},"body":{"index.html":{}}}],["https://www.googleapis.com/identitytoolkit/v3/relyingparty",{"_index":393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":270,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/AuthBody.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthBody.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["ingredieng",{"_index":399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ingrediengs",{"_index":184,"title":{},"body":{"controllers/IngredientsController.html":{}}}],["ingredient",{"_index":204,"title":{},"body":{"injectables/IngredientsService.html":{}}}],["ingredients",{"_index":183,"title":{},"body":{"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{}}}],["ingredients.axios",{"_index":202,"title":{},"body":{"modules/IngredientsModule.html":{}}}],["ingredients.controller",{"_index":200,"title":{},"body":{"modules/IngredientsModule.html":{}}}],["ingredients.service",{"_index":192,"title":{},"body":{"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{}}}],["ingredients/ingredients.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["ingredientsaxios",{"_index":201,"title":{},"body":{"modules/IngredientsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ingredientscontroller",{"_index":181,"title":{"controllers/IngredientsController.html":{}},"body":{"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"coverage.html":{}}}],["ingredientsmodule",{"_index":42,"title":{"modules/IngredientsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IngredientsModule.html":{},"modules.html":{},"overview.html":{}}}],["ingredientsservice",{"_index":191,"title":{"injectables/IngredientsService.html":{}},"body":{"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{},"coverage.html":{},"overview.html":{}}}],["inject",{"_index":162,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{}}}],["inject(axios",{"_index":165,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/IngredientsService.html":{}}}],["injectable",{"_index":57,"title":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{},"coverage.html":{}}}],["injectables",{"_index":58,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{},"overview.html":{}}}],["injection",{"_index":395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inspired",{"_index":325,"title":{},"body":{"index.html":{}}}],["install",{"_index":333,"title":{},"body":{"index.html":{}}}],["installation",{"_index":330,"title":{},"body":{"index.html":{}}}],["instance",{"_index":123,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{},"miscellaneous/variables.html":{}}}],["instances",{"_index":397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":63,"title":{"interfaces/AuthBody.html":{}},"body":{"interfaces/AuthBody.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":65,"title":{},"body":{"interfaces/AuthBody.html":{}}}],["join",{"_index":360,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":368,"title":{},"body":{"index.html":{}}}],["legend",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{},"overview.html":{}}}],["license",{"_index":374,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":351,"title":{},"body":{"index.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthBody.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["memberof",{"_index":84,"title":{},"body":{"interfaces/AuthBody.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["message",{"_index":173,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["metadata",{"_index":296,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["miscellaneous",{"_index":307,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":350,"title":{},"body":{"index.html":{}}}],["mode",{"_index":339,"title":{},"body":{"index.html":{}}}],["module",{"_index":29,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{},"overview.html":{}}}],["modules",{"_index":31,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CoreModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":363,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":369,"title":{},"body":{"index.html":{}}}],["name",{"_index":106,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["nest",{"_index":327,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":373,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":291,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":292,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":114,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"coverage.html":{}}}],["node.js",{"_index":317,"title":{},"body":{"index.html":{}}}],["npm",{"_index":332,"title":{},"body":{"index.html":{}}}],["open",{"_index":352,"title":{},"body":{"index.html":{}}}],["optional",{"_index":107,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["order",{"_index":233,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"miscellaneous/variables.html":{}}}],["orderby",{"_index":266,"title":{},"body":{"injectables/OrdersService.html":{}}}],["orderdto",{"_index":230,"title":{},"body":{"controllers/OrdersController.html":{}}}],["orders",{"_index":218,"title":{},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["orders.axios",{"_index":249,"title":{},"body":{"modules/OrdersModule.html":{}}}],["orders.controller",{"_index":247,"title":{},"body":{"modules/OrdersModule.html":{}}}],["orders.service",{"_index":235,"title":{},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{}}}],["orders/orders.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["ordersaxios",{"_index":248,"title":{},"body":{"modules/OrdersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["orderscontroller",{"_index":216,"title":{"controllers/OrdersController.html":{}},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"coverage.html":{}}}],["ordersmodule",{"_index":43,"title":{"modules/OrdersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["ordersservice",{"_index":234,"title":{"injectables/OrdersService.html":{}},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["out",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{},"overview.html":{}}}],["overview",{"_index":380,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":289,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":124,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["parameters",{"_index":105,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["params",{"_index":213,"title":{},"body":{"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{}}}],["password",{"_index":76,"title":{},"body":{"interfaces/AuthBody.html":{}}}],["please",{"_index":361,"title":{},"body":{"index.html":{}}}],["post",{"_index":116,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["post('signin",{"_index":98,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('signup",{"_index":111,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["prefix",{"_index":87,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/IngredientsController.html":{},"controllers/OrdersController.html":{}}}],["private",{"_index":126,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{}}}],["production",{"_index":341,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":316,"title":{},"body":{"index.html":{}}}],["project",{"_index":353,"title":{},"body":{"index.html":{}}}],["promise",{"_index":109,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/OrdersService.html":{}}}],["properties",{"_index":74,"title":{},"body":{"interfaces/AuthBody.html":{}}}],["provide",{"_index":142,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{}}}],["providers",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{},"overview.html":{}}}],["public",{"_index":94,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["read",{"_index":362,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["reflect",{"_index":295,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":69,"title":{},"body":{"interfaces/AuthBody.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"miscellaneous/variables.html":{}}}],["relevant",{"_index":155,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["repository",{"_index":329,"title":{},"body":{"index.html":{}}}],["req",{"_index":190,"title":{},"body":{"controllers/IngredientsController.html":{},"controllers/OrdersController.html":{}}}],["request",{"_index":187,"title":{},"body":{"controllers/IngredientsController.html":{},"controllers/OrdersController.html":{}}}],["request.body.userid",{"_index":241,"title":{},"body":{"controllers/OrdersController.html":{}}}],["requests",{"_index":101,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/IngredientsController.html":{},"controllers/OrdersController.html":{}}}],["required",{"_index":81,"title":{},"body":{"interfaces/AuthBody.html":{}}}],["reset",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{},"overview.html":{}}}],["response.data",{"_index":168,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/OrdersService.html":{}}}],["responsible",{"_index":89,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["result",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthBody.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.data",{"_index":215,"title":{},"body":{"injectables/IngredientsService.html":{}}}],["results",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthBody.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["returnsecuretoken",{"_index":77,"title":{},"body":{"interfaces/AuthBody.html":{}}}],["rimraf",{"_index":298,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":93,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/IngredientsController.html":{},"controllers/OrdersController.html":{}}}],["run",{"_index":336,"title":{},"body":{"index.html":{}}}],["running",{"_index":334,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":300,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":260,"title":{},"body":{"injectables/OrdersService.html":{}}}],["saveorder",{"_index":221,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["saveorder(@req",{"_index":242,"title":{},"body":{"controllers/OrdersController.html":{}}}],["saveorder(authenticationtoken",{"_index":258,"title":{},"body":{"injectables/OrdersService.html":{}}}],["saveorder(request",{"_index":229,"title":{},"body":{"controllers/OrdersController.html":{}}}],["scalable",{"_index":321,"title":{},"body":{"index.html":{}}}],["server",{"_index":312,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["side",{"_index":322,"title":{},"body":{"index.html":{}}}],["signin",{"_index":95,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signin(@body",{"_index":129,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signin(signinbody",{"_index":97,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signinbody",{"_index":108,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signing",{"_index":102,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signs",{"_index":160,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["signup",{"_index":96,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signup(@body",{"_index":127,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signup(signupbody",{"_index":110,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signupbody",{"_index":115,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthBody.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CoreModule.html":{},"controllers/IngredientsController.html":{},"modules/IngredientsModule.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"index.html":{}}}],["specific",{"_index":228,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["sponsors",{"_index":356,"title":{},"body":{"index.html":{}}}],["src/.../authentication.axios.ts",{"_index":385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ingredients.axios.ts",{"_index":387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":309,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../orders.axios.ts",{"_index":388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tokens.ts",{"_index":386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":59,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":60,"title":{},"body":{"injectables/AppService.html":{}}}],["src/authentication/authentication.axios.ts",{"_index":274,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":86,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:32",{"_index":112,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:44",{"_index":99,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":133,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":144,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:14",{"_index":149,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:34",{"_index":161,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:47",{"_index":159,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:60",{"_index":152,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.types.ts",{"_index":66,"title":{},"body":{"interfaces/AuthBody.html":{},"coverage.html":{}}}],["src/core/core.module.ts",{"_index":177,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/tokens.ts",{"_index":281,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/ingredients/ingredients.axios.ts",{"_index":282,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/ingredients/ingredients.controller.ts",{"_index":182,"title":{},"body":{"controllers/IngredientsController.html":{},"coverage.html":{}}}],["src/ingredients/ingredients.controller.ts:33",{"_index":188,"title":{},"body":{"controllers/IngredientsController.html":{}}}],["src/ingredients/ingredients.module.ts",{"_index":199,"title":{},"body":{"modules/IngredientsModule.html":{}}}],["src/ingredients/ingredients.service.ts",{"_index":203,"title":{},"body":{"injectables/IngredientsService.html":{},"coverage.html":{}}}],["src/ingredients/ingredients.service.ts:12",{"_index":207,"title":{},"body":{"injectables/IngredientsService.html":{}}}],["src/ingredients/ingredients.service.ts:32",{"_index":209,"title":{},"body":{"injectables/IngredientsService.html":{}}}],["src/main.ts",{"_index":284,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/orders/orders.axios.ts",{"_index":286,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/orders/orders.controller.ts",{"_index":217,"title":{},"body":{"controllers/OrdersController.html":{},"coverage.html":{}}}],["src/orders/orders.controller.ts:23",{"_index":224,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:35",{"_index":227,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:48",{"_index":231,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.module.ts",{"_index":246,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/orders/orders.service.ts",{"_index":250,"title":{},"body":{"injectables/OrdersService.html":{},"coverage.html":{}}}],["src/orders/orders.service.ts:12",{"_index":253,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:27",{"_index":254,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:43",{"_index":257,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:65",{"_index":259,"title":{},"body":{"injectables/OrdersService.html":{}}}],["start",{"_index":337,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":340,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":342,"title":{},"body":{"index.html":{}}}],["started",{"_index":315,"title":{"index.html":{}},"body":{}}],["starter",{"_index":328,"title":{},"body":{"index.html":{}}}],["starts",{"_index":310,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":271,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":365,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/AuthBody.html":{},"injectables/IngredientsService.html":{},"injectables/OrdersService.html":{},"miscellaneous/variables.html":{}}}],["submitting",{"_index":232,"title":{},"body":{"controllers/OrdersController.html":{}}}],["support",{"_index":349,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":376,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":302,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":288,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":287,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":343,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":348,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":347,"title":{},"body":{"index.html":{}}}],["tests",{"_index":345,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":355,"title":{},"body":{"index.html":{}}}],["then((response",{"_index":263,"title":{},"body":{"injectables/OrdersService.html":{}}}],["then(response",{"_index":167,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["then(result",{"_index":214,"title":{},"body":{"injectables/IngredientsService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authenticaiton.post(`/signupnewuser?key=${config.api_key",{"_index":166,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.authenticaiton.post(`/verifypassword?key=${config.api_key",{"_index":170,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.authentication.signin(signinbody",{"_index":130,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authentication.signup(signupbody",{"_index":128,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.axios",{"_index":262,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.ingredients.get",{"_index":212,"title":{},"body":{"injectables/IngredientsService.html":{}}}],["this.ingredients.getall(request.query.auth",{"_index":196,"title":{},"body":{"controllers/IngredientsController.html":{}}}],["this.orders.getall(request.query.auth",{"_index":238,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.orders.getbyuser(request.query.auth",{"_index":240,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.orders.saveorder(request.query.auth",{"_index":243,"title":{},"body":{"controllers/OrdersController.html":{}}}],["throw",{"_index":171,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/OrdersService.html":{}}}],["token",{"_index":396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["touch",{"_index":366,"title":{},"body":{"index.html":{}}}],["true",{"_index":83,"title":{},"body":{"interfaces/AuthBody.html":{}}}],["twitter",{"_index":372,"title":{},"body":{"index.html":{}}}],["type",{"_index":78,"title":{},"body":{"interfaces/AuthBody.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/IngredientsController.html":{},"injectables/IngredientsService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":179,"title":{},"body":{"modules/CoreModule.html":{}}}],["typescript",{"_index":305,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["ui",{"_index":303,"title":{},"body":{"dependencies.html":{}}}],["unit",{"_index":344,"title":{},"body":{"index.html":{}}}],["up",{"_index":113,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["user",{"_index":104,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["user's",{"_index":79,"title":{},"body":{"interfaces/AuthBody.html":{}}}],["userid",{"_index":256,"title":{},"body":{"injectables/OrdersService.html":{}}}],["usevalue",{"_index":143,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{}}}],["using",{"_index":313,"title":{},"body":{"miscellaneous/functions.html":{}}}],["value",{"_index":390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":275,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":384,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":158,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["watch",{"_index":338,"title":{},"body":{"index.html":{}}}],["website",{"_index":370,"title":{},"body":{"index.html":{}}}],["world",{"_index":62,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":359,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IngredientsModule.html":{},"modules/OrdersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nIngredientsModule\n\nIngredientsModule\n\nAppModule -->\n\nIngredientsModule->AppModule\n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Root module for the application. Imports all feature modules\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            IngredientsModule\n                        \n                        \n                            OrdersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { OrdersModule } from './orders/orders.module';\nimport { IngredientsModule } from './ingredients/ingredients.module';\nimport { AuthenticationModule } from './authentication/authentication.module';\n\n/**\n * Root module for the application. Imports all feature modules\n *\n * @export\n * @class AppModule\n */\n@Module({\n  imports: [\n    OrdersModule,\n    IngredientsModule,\n    AuthenticationModule,\n  ],\n  controllers: [\n    AppController,\n  ],\n  providers: [\n    AppService,\n  ],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthBody.html":{"url":"interfaces/AuthBody.html","title":"interface - AuthBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.types.ts\n        \n\n            \n                Description\n            \n            \n                DTO for auth-related communication with Firebase and client apps\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        password\n                                \n                                \n                                        returnSecureToken\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User's email\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User's password\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        returnSecureToken\n                                    \n                                \n                                \n                                    \n                                        returnSecureToken:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Required by Firebase. Should always be true\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthBody {\n\n  /**\n   * User's email\n   *\n   * @type {string}\n   * @memberof AuthBody\n   */\n  email: string;\n\n  /**\n   * User's password\n   *\n   * @type {string}\n   * @memberof AuthBody\n   */\n  password: string;\n\n  /**\n   * Required by Firebase. Should always be true\n   *\n   * @type {boolean}\n   * @memberof AuthBody\n   */\n  returnSecureToken: boolean;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n            \n                Description\n            \n            \n                Responsible for defining and handling API routes related to authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                signIn\n                            \n                            \n                                    Public\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(signInBody: AuthBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:44\n                \n            \n\n\n            \n                \n                    Handles requests for signing in an existing user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInBody\n                                    \n                                                AuthBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpBody: AuthBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:32\n                \n            \n\n\n            \n                \n                    Handles requests for signing up a new user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpBody\n                                    \n                                                AuthBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body } from '@nestjs/common';\nimport { AuthBody } from './authentication.types';\nimport { AuthenticationService } from './authentication.service';\n\n/**\n * Responsible for defining and handling API routes related to authentication\n *\n * @export\n * @class AuthenticationController\n */\n@Controller('authentication')\nexport class AuthenticationController {\n\n  /**\n   * Creates an instance of AuthenticationController\n   * @param {AuthenticationService} authentication\n   * @memberof AuthenticationController\n   */\n  constructor(\n    private readonly authentication: AuthenticationService,\n  ) {\n  }\n\n  /**\n   * Handles requests for signing up a new user\n   *\n   * @param {AuthBody} signUpBody\n   * @returns {Promise}\n   * @memberof AuthenticationController\n   */\n  @Post('signup')\n  public signUp(@Body() signUpBody: AuthBody): Promise {\n    return this.authentication.signUp(signUpBody);\n  }\n\n  /**\n   * Handles requests for signing in an existing user\n   *\n   * @param {AuthBody} signInBody\n   * @returns {Promise}\n   * @memberof AuthenticationController\n   */\n  @Post('signin')\n  public signIn(@Body() signInBody: AuthBody): Promise {\n    return this.authentication.signIn(signInBody);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Aggregates the authentication functionality of the app.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthenticationController } from './authentication.controller';\nimport { AuthenticationService } from './authentication.service';\nimport { AXIOS } from '../core/tokens';\nimport { AuthenticationAxios } from './authentication.axios';\n\n/**\n * Aggregates the authentication functionality of the app.\n *\n * @export\n * @class AuthenticationModule\n */\n@Module({\n  controllers: [AuthenticationController],\n  providers: [\n    AuthenticationService,\n    {\n      provide: AXIOS,\n      useValue: AuthenticationAxios,\n    },\n  ],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n            \n                Description\n            \n            \n                Responsible for auth-related communication with the Firebase API\n\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleError\n                            \n                            \n                                    Public\n                                signIn\n                            \n                            \n                                    Public\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticaiton: AxiosInstance)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:14\n                            \n                        \n\n                \n                    \n                            Creates an instance of AuthenticationService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticaiton\n                                                  \n                                                        \n                                                                    AxiosInstance\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            handleError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleError(error)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:60\n                \n            \n\n\n            \n                \n                    Handles communication errors, extracting only the relevant data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(signInBody: AuthBody)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:47\n                \n            \n\n\n            \n                \n                    Signs in an existing user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInBody\n                                    \n                                                AuthBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpBody: AuthBody)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:34\n                \n            \n\n\n            \n                \n                    Signs up a new user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpBody\n                                    \n                                                AuthBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, HttpException } from '@nestjs/common';\nimport { AuthBody } from './authentication.types';\nimport { AXIOS } from '../core/tokens';\nimport { config } from '../../api-config';\nimport { AxiosInstance } from 'axios';\n\n/**\n * Responsible for auth-related communication with the Firebase API\n *\n * @export\n * @class AuthenticationService\n */\n@Injectable()\nexport class AuthenticationService {\n\n  /**\n   * Creates an instance of AuthenticationService.\n   *\n   * @param {AxiosInstance} authenticaiton\n   * @memberof AuthenticationService\n   */\n  constructor(\n    @Inject(AXIOS) private readonly authenticaiton: AxiosInstance,\n  ) {\n  }\n\n  /**\n   * Signs up a new user\n   *\n   * @param {AuthBody} signUpBody\n   * @returns {Promise}\n   * @memberof AuthenticationService\n   */\n  public signUp(signUpBody: AuthBody): Promise {\n    return this.authenticaiton.post(`/signupNewUser?key=${config.API_KEY}`, signUpBody)\n      .then(response => response.data)\n      .catch(this.handleError);\n  }\n\n  /**\n   * Signs in an existing user\n   *\n   * @param {AuthBody} signInBody\n   * @returns {Promise}\n   * @memberof AuthenticationService\n   */\n  public signIn(signInBody: AuthBody): Promise {\n    return this.authenticaiton.post(`/verifyPassword?key=${config.API_KEY}`, signInBody)\n      .then(response => response.data)\n      .catch(this.handleError);\n  }\n\n  /**\n   * Handles communication errors, extracting only the relevant data\n   *\n   * @private\n   * @param {*} error\n   * @memberof AuthenticationService\n   */\n  private handleError(error) {\n    throw new HttpException({\n      ...error.response.data,\n      message: error.message,\n    }, error.response.status);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Aggregates core types, functionality and features\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\n/**\n * Aggregates core types, functionality and features\n *\n * @export\n * @class CoreModule\n */\n@Module({})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IngredientsController.html":{"url":"controllers/IngredientsController.html","title":"controller - IngredientsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IngredientsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ingredients/ingredients.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                ingredients\n            \n\n            \n                Description\n            \n            \n                Responsible for defining and handling API routes related to ingrediengs\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllIngredients\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllIngredients\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllIngredients(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/ingredients/ingredients.controller.ts:33\n                \n            \n\n\n            \n                \n                    Handles requests for fetching all the ingrediengs\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req } from '@nestjs/common';\nimport { IngredientsService } from './ingredients.service';\nimport { Request } from 'express';\n\n/**\n * Responsible for defining and handling API routes related to ingrediengs\n *\n * @export\n * @class IngredientsController\n */\n@Controller('ingredients')\nexport class IngredientsController {\n\n  /**\n   * Creates an instance of IngredientsController\n   *\n   * @param {IngredientsService} ingredients\n   * @memberof IngredientsController\n   */\n  constructor(\n    private readonly ingredients: IngredientsService,\n  ) {\n  }\n\n  /**\n   * Handles requests for fetching all the ingrediengs\n   *\n   * @param {Request} request\n   * @returns\n   * @memberof IngredientsController\n   */\n  @Get()\n  getAllIngredients(@Req() request: Request) {\n    return this.ingredients.getAll(request.query.auth);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IngredientsModule.html":{"url":"modules/IngredientsModule.html","title":"module - IngredientsModule","body":"\n                   \n\n\n\n\n    Modules\n    IngredientsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IngredientsModule\n\n\n\ncluster_IngredientsModule_providers\n\n\n\n\nIngredientsService\n\nIngredientsService\n\n\n\nIngredientsModule\n\nIngredientsModule\n\nIngredientsModule -->\n\nIngredientsService->IngredientsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/ingredients/ingredients.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Aggregates the ingredients functionality of the app.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IngredientsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            IngredientsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { IngredientsController } from './ingredients.controller';\nimport { IngredientsService } from './ingredients.service';\nimport { AXIOS } from '../core/tokens';\nimport { IngredientsAxios } from './ingredients.axios';\n\n/**\n * Aggregates the ingredients functionality of the app.\n *\n * @export\n * @class IngredientsModule\n */\n@Module({\n  controllers: [\n    IngredientsController,\n  ],\n  providers: [\n    IngredientsService,\n    {\n      provide: AXIOS,\n      useValue: IngredientsAxios,\n    },\n  ],\n})\nexport class IngredientsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IngredientsService.html":{"url":"injectables/IngredientsService.html","title":"injectable - IngredientsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  IngredientsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ingredients/ingredients.service.ts\n        \n\n            \n                Description\n            \n            \n                Responsible for ingredient-related communication with the Firebase API\n\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ingredients: AxiosInstance)\n                    \n                \n                        \n                            \n                                Defined in src/ingredients/ingredients.service.ts:12\n                            \n                        \n\n                \n                    \n                            Creates an instance of IngredientsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ingredients\n                                                  \n                                                        \n                                                                    AxiosInstance\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \ngetAll(authenticationToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ingredients/ingredients.service.ts:32\n                \n            \n\n\n            \n                \n                    Gets all the ingredients\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authenticationToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { AxiosInstance } from 'axios';\nimport { AXIOS } from '../core/tokens';\n\n/**\n * Responsible for ingredient-related communication with the Firebase API\n *\n * @export\n * @class IngredientsService\n */\n@Injectable()\nexport class IngredientsService {\n\n  /**\n   * Creates an instance of IngredientsService.\n   *\n   * @param {AxiosInstance} ingredients\n   * @memberof IngredientsService\n   */\n  constructor(\n    @Inject(AXIOS) private readonly ingredients: AxiosInstance,\n  ) {\n  }\n\n  /**\n   * Gets all the ingredients\n   *\n   * @param {string} authenticationToken\n   * @returns\n   * @memberof IngredientsService\n   */\n  getAll(authenticationToken: string) {\n    return this.ingredients.get('', { params: { auth: authenticationToken } })\n      .then(result => result.data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OrdersController.html":{"url":"controllers/OrdersController.html","title":"controller - OrdersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OrdersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/orders.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                orders\n            \n\n            \n                Description\n            \n            \n                Responsible for defining and handling API routes related to orders\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllOrders\n                            \n                            \n                                getOrdersByUser\n                            \n                            \n                                saveOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllOrders\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllOrders(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('all')\n                \n            \n\n            \n                \n                    Defined in src/orders/orders.controller.ts:23\n                \n            \n\n\n            \n                \n                    Handles requests for fetching all the orders\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOrdersByUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetOrdersByUser(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('byUser')\n                \n            \n\n            \n                \n                    Defined in src/orders/orders.controller.ts:35\n                \n            \n\n\n            \n                \n                    Handles requests for fetching orders for a specific user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveOrder\n                        \n                        \n                    \n                \n            \n            \n                \nsaveOrder(request: Request, orderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/orders/orders.controller.ts:48\n                \n            \n\n\n            \n                \n                    Handles requests for submitting a new order\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    orderDto\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Req } from '@nestjs/common';\nimport { OrdersService } from './orders.service';\nimport { Request } from 'express';\n\n/**\n * Responsible for defining and handling API routes related to orders\n *\n * @export\n * @class OrdersController\n */\n@Controller('orders')\nexport class OrdersController {\n  constructor(private readonly orders: OrdersService) {}\n\n  /**\n   * Handles requests for fetching all the orders\n   *\n   * @param {Request} request\n   * @returns\n   * @memberof OrdersController\n   */\n  @Get('all')\n  getAllOrders(@Req() request: Request) {\n    return this.orders.getAll(request.query.auth);\n  }\n\n  /**\n   * Handles requests for fetching orders for a specific user\n   *\n   * @param {Request} request\n   * @returns\n   * @memberof OrdersController\n   */\n  @Get('byUser')\n  getOrdersByUser(@Req() request: Request) {\n    return this.orders.getByUser(request.query.auth, request.body.userId);\n  }\n\n  /**\n   * Handles requests for submitting a new order\n   *\n   * @param {Request} request\n   * @param {*} orderDto\n   * @returns\n   * @memberof OrdersController\n   */\n  @Post()\n  saveOrder(@Req() request: Request, @Body() orderDto) {\n    return this.orders.saveOrder(request.query.auth, orderDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrdersModule.html":{"url":"modules/OrdersModule.html","title":"module - OrdersModule","body":"\n                   \n\n\n\n\n    Modules\n    OrdersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_providers\n\n\n\n\nOrdersService\n\nOrdersService\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/orders/orders.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Aggregates the orders functionality of the app.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OrdersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OrdersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OrdersController } from './orders.controller';\nimport { OrdersService } from './orders.service';\nimport { OrdersAxios } from './orders.axios';\nimport { AXIOS } from '../core/tokens';\n\n/**\n * Aggregates the orders functionality of the app.\n *\n * @export\n * @class OrdersModule\n */\n@Module({\n  controllers: [\n    OrdersController,\n  ],\n  providers: [\n    OrdersService,\n    {\n      provide: AXIOS,\n      useValue: OrdersAxios,\n    },\n  ],\n})\nexport class OrdersModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrdersService.html":{"url":"injectables/OrdersService.html","title":"injectable - OrdersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OrdersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/orders.service.ts\n        \n\n            \n                Description\n            \n            \n                Responsible for order-related communication with the Firebase API\n\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAll\n                            \n                            \n                                getByUser\n                            \n                            \n                                saveOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(axios: AxiosInstance)\n                    \n                \n                        \n                            \n                                Defined in src/orders/orders.service.ts:12\n                            \n                        \n\n                \n                    \n                            Creates an instance of OrdersService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        axios\n                                                  \n                                                        \n                                                                    AxiosInstance\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \ngetAll(authenticationToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/orders/orders.service.ts:27\n                \n            \n\n\n            \n                \n                    Get all the orders\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authenticationToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getByUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetByUser(authenticationToken: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/orders/orders.service.ts:43\n                \n            \n\n\n            \n                \n                    Get the orders for a specific user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authenticationToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveOrder\n                        \n                        \n                    \n                \n            \n            \n                \nsaveOrder(authenticationToken: string, order: any)\n                \n            \n\n\n            \n                \n                    Defined in src/orders/orders.service.ts:65\n                \n            \n\n\n            \n                \n                    Save a new order\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authenticationToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    order\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, HttpException } from '@nestjs/common';\nimport { AXIOS } from '../core/tokens';\nimport { AxiosInstance } from 'axios';\n\n/**\n * Responsible for order-related communication with the Firebase API\n *\n * @export\n * @class OrdersService\n */\n@Injectable()\nexport class OrdersService {\n\n  /**\n   * Creates an instance of OrdersService\n   * @param {AxiosInstance} axios\n   * @memberof OrdersService\n   */\n  constructor(@Inject(AXIOS) private readonly axios: AxiosInstance) {}\n\n  /**\n   * Get all the orders\n   * @param {string} authenticationToken\n   * @returns {Promise}\n   * @memberof OrdersService\n   */\n  getAll(authenticationToken: string): Promise {\n    return this.axios\n      .get('', { params: { auth: authenticationToken } })\n      .then((response) => response.data)\n      .catch((error) => {\n        throw new HttpException(error.message, error.response.status);\n      });\n  }\n\n  /**\n   * Get the orders for a specific user\n   * @param {string} authenticationToken\n   * @param {string} userId\n   * @returns {Promise}\n   * @memberof OrdersService\n   */\n  getByUser(authenticationToken: string, userId: string): Promise {\n    return this.axios\n      .get('', {\n        params: {\n          auth: authenticationToken,\n          orderBy: 'userId',\n          equalTo: userId,\n      },\n    })\n      .then((response) => response.data)\n      .catch((error) => {\n        throw new HttpException(error.message, error.response.status);\n      });\n  }\n\n  /**\n   * Save a new order\n   * @param {string} authenticationToken\n   * @param {*} order\n   * @returns {Promise}\n   * @memberof OrdersService\n   */\n  saveOrder(authenticationToken: string, order: any): Promise {\n    return this.axios\n      .post('', order, { params: { auth: authenticationToken } })\n      .then((response) => response.data)\n      .catch((error) => {\n        throw new HttpException(error.message, error.response.status);\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/authentication.axios.ts\n            \n            variable\n            AuthenticationAxios\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/authentication/authentication.types.ts\n            \n            interface\n            AuthBody\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/core/tokens.ts\n            \n            variable\n            AXIOS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/ingredients/ingredients.axios.ts\n            \n            variable\n            IngredientsAxios\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/ingredients/ingredients.controller.ts\n            \n            controller\n            IngredientsController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/ingredients/ingredients.service.ts\n            \n            injectable\n            IngredientsService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/orders/orders.axios.ts\n            \n            variable\n            OrdersAxios\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/orders/orders.controller.ts\n            \n            controller\n            OrdersController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/orders/orders.service.ts\n            \n            injectable\n            OrdersService\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^5.4.0\n        \n            @nestjs/core : ^5.4.0\n        \n            @nestjs/swagger : ^3.0.2\n        \n            axios : ^0.18.0\n        \n            reflect-metadata : ^0.1.12\n        \n            rimraf : ^2.6.2\n        \n            rxjs : ^6.2.2\n        \n            swagger-ui-express : ^4.0.5\n        \n            typescript : ^3.0.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Creates and starts an HTTP server using the AppModule\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nbash\n$ npm install\nRunning the app\n```bash\ndevelopment\n$ npm run start\nwatch mode\n$ npm run start:dev\nproduction mode\n$ npm run start:prod\n```\nTest\n```bash\nunit tests\n$ npm run test\ne2e tests\n$ npm run test:e2e\ntest coverage\n$ npm run test:cov\n```\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IngredientsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrdersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_IngredientsModule\n\n\n\ncluster_IngredientsModule_providers\n\n\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nIngredientsModule\n\nIngredientsModule\n\nAppModule -->\n\nIngredientsModule->AppModule\n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nIngredientsService\n\nIngredientsService\n\nIngredientsModule -->\n\nIngredientsService->IngredientsModule\n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthenticationAxios   (src/.../authentication.axios.ts)\n                        \n                        \n                            AXIOS   (src/.../tokens.ts)\n                        \n                        \n                            IngredientsAxios   (src/.../ingredients.axios.ts)\n                        \n                        \n                            OrdersAxios   (src/.../orders.axios.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/authentication/authentication.axios.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AuthenticationAxios\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : axios.create({\n  baseURL: `https://www.googleapis.com/identitytoolkit/v3/relyingparty`,\n})\n                        \n                    \n\n                \n                    \n                        Axios instance, configured for auth-related communication with Firebase.\n\n                    \n                \n\n            \n        \n\n    src/core/tokens.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AXIOS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'AXIOS'\n                        \n                    \n\n                \n                    \n                        Injection token for the AXIOS instances.\n\n                    \n                \n\n            \n        \n\n    src/ingredients/ingredients.axios.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            IngredientsAxios\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : axios.create({\n  baseURL: `${config.API_BASE_URL}/ingredients.json`,\n})\n                        \n                    \n\n                \n                    \n                        Axios instance, configured for ingredieng-related communication with Firebase.\n\n                    \n                \n\n            \n        \n\n    src/orders/orders.axios.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            OrdersAxios\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : axios.create({\n  baseURL: `${config.API_BASE_URL}/orders.json`,\n})\n                        \n                    \n\n                \n                    \n                        Axios instance, configured for order-related communication with Firebase.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
